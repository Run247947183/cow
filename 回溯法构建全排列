import java.util.*;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

// 递归回溯法构建全排列
public class Test2 {
    public static void main(String[] args) {
        String s = "cab";
        System.out.println(HuiSu(s));
        Lock lock = new ReentrantLock();
    }
    public static HashSet<String> set = new HashSet<>();
    public static ArrayList<Character> list = new ArrayList<>();
    public static int len;
    public static char[] chars;
    public static ArrayList<String> HuiSu(String s) {
        if (s == null) {
            return new ArrayList<String>();
        }
        len = s.length();
        chars = s.toCharArray();
        for (char c : chars) {
            list.add(c);
        }
        int k = 0;
        helper(k, list);
        ArrayList<String> res = new ArrayList<>(set);
        Collections.sort(res);
        return res;
    }

    private static void helper(int k, ArrayList<Character> list) {
        if (k == len) {
            set.add(new String(chars));
        } else {
            for (int i = 0; i < list.size(); i++) {
                char c = list.get(i);
                chars[k] = c;
                ArrayList<Character> list2 = new ArrayList<>(list);
                list2.remove(i);
                helper(k + 1, list2);
            }
        }
    }
}
