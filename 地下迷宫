import java.util.*;
import java.util.LinkedList;

public class Main {
    private static int minCoust = Integer.MAX_VALUE;
    private static int P = 0;
    private static int m = 0;
    private static int n = 0;
    private static String path = null;
    private static LinkedList<Point> list = new LinkedList<>();
    static class Point {
        public int x;
        public int y;
        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        n = in.nextInt();
        m = in.nextInt();
        P = in.nextInt();
        int[][] res = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                res[i][j] = in.nextInt();
            }
        }
        helper(res, 0, 0, 0);
        if (minCoust == Integer.MAX_VALUE) {
            System.out.println("Can not escape!");
        } else {
            System.out.println(path.substring(0, path.length() - 1));
        }
    }

    private static void helper(int[][] res, int x, int y, int curCount) {
        if (curCount > P) {
            return;
        }
        list.offer(new Point(x, y));
        res[x][y] = 100;
        if (x == 0 && y == m - 1) {
            if (minCoust > curCount) {
                minCoust = curCount;
                helper2();
            }
            res[x][y] = 1;
            list.removeLast();
            return;
        }
        if (x + 1 < n && res[x + 1][y] == 1) {
            helper(res, x + 1, y, curCount);
        }
        if (x > 0 && res[x - 1][y] == 1) {
            helper(res, x - 1, y, curCount + 3);
        }
        if (y + 1 < n && res[x][y + 1] == 1) {
            helper(res, x, y + 1, curCount + 1);
        }
        if (y > 0 && res[x][y - 1] == 1) {
            helper(res, x, y - 1, curCount + 1);
        }
        res[x][y] = 1;
        list.removeLast();
    }

    private static void helper2() {
        Iterator<Point> iterator = list.iterator();
        StringBuilder sb = new StringBuilder();
        while (iterator.hasNext()) {
            Point point = iterator.next();
            sb.append("[" + point.x + "," + point.y + "],");
        }
        path = sb.toString();
    }
}
